var models = require("../models");
var Sequelize = require('sequelize');

var paginate = require('../helpers/paginate').paginate;


// Autoload el quiz asociado a :quizId
exports.load = function (req, res, next, quizId) {

    models.Quiz.findById(quizId, {
        include: [
 	{model: models.Tip, include: [{model: models.User, as:'Author'}]},
            {model: models.User, as: 'Author'}
        ]
    })
    .then(function (quiz) {
        if (quiz) {
            req.quiz = quiz;
            next();
        } else {
            throw new Error('No existe ningún quiz con id=' + quizId);
        }
    })
    .catch(function (error) {
        next(error);
    });
};


// MW que permite acciones solamente si al usuario logeado es admin o es el autor del quiz.
exports.adminOrAuthorRequired = function(req, res, next){

    var isAdmin  = req.session.user.isAdmin;
    var isAuthor = req.quiz.AuthorId === req.session.user.id;

    if (isAdmin || isAuthor) {
        next();
    } else {
        console.log('Operación prohibida: El usuario logeado no es el autor del quiz, ni un administrador.');
        res.send(403);
    }
};


// GET /quizzes
exports.index = function (req, res, next) {

    var countOptions = {
        where: {}
    };

    var title = "Preguntas";

    // Busquedas:
    var search = req.query.search || '';
    if (search) {
        var search_like = "%" + search.replace(/ +/g,"%") + "%";

        countOptions.where.question = { $like: search_like };
    }

    // Si existe req.user, mostrar solo sus preguntas.
    if (req.user) {
        countOptions.where.AuthorId = req.user.id;
        title = "Preguntas de " + req.user.username;
    }

    models.Quiz.count(countOptions)
    .then(function (count) {

        // Paginacion:

        var items_per_page = 10;

        // La pagina a mostrar viene en la query
        var pageno = parseInt(req.query.pageno) || 1;

        // Crear un string con el HTML que pinta la botonera de paginacion.
        // Lo añado como una variable local de res para que lo pinte el layout de la aplicacion.
        res.locals.paginate_control = paginate(count, items_per_page, pageno, req.url);

        var findOptions = countOptions;

        findOptions.offset = items_per_page * (pageno - 1);
        findOptions.limit = items_per_page;
        findOptions.include = [{model: models.User, as: 'Author'}];

        return models.Quiz.findAll(findOptions);
    })
    .then(function (quizzes) {
        res.render('quizzes/index.ejs', {
            quizzes: quizzes,
            search: search,
            title: title
        });
    })
    .catch(function (error) {
        next(error);
    });
};


// GET /quizzes/:quizId
exports.show = function (req, res, next) {

    res.render('quizzes/show', {quiz: req.quiz});
};


// GET /quizzes/new
exports.new = function (req, res, next) {

    var quiz = {question: "", answer: ""};

    res.render('quizzes/new', {quiz: quiz});
};


// POST /quizzes/create
exports.create = function (req, res, next) {

    var authorId = req.session.user && req.session.user.id || 0;

    var quiz = models.Quiz.build({
        question: req.body.question,
        answer: req.body.answer,
        AuthorId: authorId
    });

    // guarda en DB los campos pregunta y respuesta de quiz
    quiz.save({fields: ["question", "answer", "AuthorId"]})
    .then(function (quiz) {
        req.flash('success', 'Quiz creado con éxito.');
        res.redirect('/quizzes/' + quiz.id);
    })
    .catch(Sequelize.ValidationError, function (error) {

        req.flash('error', 'Errores en el formulario:');
        for (var i in error.errors) {
            req.flash('error', error.errors[i].value);
        }

        res.render('quizzes/new', {quiz: quiz});
    })
    .catch(function (error) {
        req.flash('error', 'Error al crear un Quiz: ' + error.message);
        next(error);
    });
};


// GET /quizzes/:quizId/edit
exports.edit = function (req, res, next) {

    res.render('quizzes/edit', {quiz: req.quiz});
};


// PUT /quizzes/:quizId
exports.update = function (req, res, next) {

    req.quiz.question = req.body.question;
    req.quiz.answer = req.body.answer;

    req.quiz.save({fields: ["question", "answer"]})
    .then(function (quiz) {
        req.flash('success', 'Quiz editado con éxito.');
        res.redirect('/quizzes/' + req.quiz.id);
    })
    .catch(Sequelize.ValidationError, function (error) {

        req.flash('error', 'Errores en el formulario:');
        for (var i in error.errors) {
            req.flash('error', error.errors[i].value);
        }

        res.render('quizzes/edit', {quiz: req.quiz});
    })
    .catch(function (error) {
        req.flash('error', 'Error al editar el Quiz: ' + error.message);
        next(error);
    });
};


// DELETE /quizzes/:quizId
exports.destroy = function (req, res, next) {

    req.quiz.destroy()
    .then(function () {
        req.flash('success', 'Quiz borrado con éxito.');
        res.redirect('/goback');
    })
    .catch(function (error) {
        req.flash('error', 'Error al editar el Quiz: ' + error.message);
        next(error);
    });
};


// GET /quizzes/:quizId/play
exports.play = function (req, res, next) {

    var answer = req.query.answer || '';

    res.render('quizzes/play', {
        quiz: req.quiz,
        answer: answer
    });
};


// GET /quizzes/:quizId/check
exports.check = function (req, res, next) {

    var answer = req.query.answer || "";

    var result = answer.toLowerCase().trim() === req.quiz.answer.toLowerCase().trim();

    res.render('quizzes/result', {
        quiz: req.quiz,
        result: result,
        answer: answer
    });
};
//  ENTREGA 5.2


// GET /quizzes/randomplay
//ahora creo la funcion random_play
exports.random_play = function (req, res, next) {

     // Muestra la puntuacion.
	req.session.score = req.session.score || 0; //session al empezar la peticion 

     // Array que contiene los id de las preguntas contestadas anteriormente.
     // Usar este array para no repetir preguntas y para saber cuántas preguntas se han contestado.
	if ( !req.session.yaacertadas ){	
		req.session.yaacertadas = [];		
	} 
	
//yaacertadas son las peguntas que ya hemos usado

	if (req.session.fin) {

		req.session.fin = false;
		req.session.score = 0;
		req.session.yaacertadas = [];		
	}


	// Nº aleatorio € [0, x] donde x = nº total de preguntas

	models.Quiz.count().then(function(count){

		var aleatorio = Math.floor(Math.random()*count);
		var idusado = aleatorio + 1;	
	
		while(req.session.yaacertadas.indexOf(idusado) != -1) {

			var aleatorio = Math.floor(Math.random()*count);
			var idusado = aleatorio + 1;	
		}

		req.session.yaacertadas.push(idusado); //guarda el id en el aray de preguntas ya acertadas       
		console.log("Este es el ID " + idusado);
	
		models.Quiz.findById(idusado).then(function(quiz){ 
                        //busca en la tabla Quiz el id y pasa el quiz en el parametro de la funcion

			if (quiz) {
			
			  res.render('quizzes/randomplay', { //llamo a random_play y creo los parametros
				score: req.session.score,
				quiz: quiz
			  });
		
			} else { // en el caso de que no este creado
				res.send("ERROR");
			}
		});
	});
};


// GET /quizzes/randomcheck
exports.randomcheck = function (req, res, next) {

    models.Quiz.count().then(function(count){

	    var answer = req.query.answer || ""; // Recibe respuesta en parámetro answer de query y
		                                 // si no existe, lo inicializa con "". 
		                                 // (Se puede enviar respuesta en blanco).

	 // Comprueba el resultado que tu has pasado con el resultado de la pregunta en el quiz  
	    var result = answer.toLowerCase().trim() === req.quiz.answer.toLowerCase().trim(); 

	 // Si la respuesta es correcta...
	    if (result) {
		req.session.score++;
	    } else {
		req.session.score = 0;
	    }


	 // Si todavía tengo preguntas por contestar...(?)
	    if ( req.session.yaacertadas.length !== count) { //count numero total, si el array es distinto al numero total de preguntas

		if (result) {
			req.session.fin = false;
	    	} else { 
			req.session.fin = true;
		}
	   	    
	    	res.render('quizzes/random_result', {  //Te envio a la pagina que te dice si has acertado,
                                                       //desde alli ya te envian a volver a jugar
			result: result,
			answer: answer,
			score: req.session.score
	    	});
	   

	    } else { // si ya no tengo más preguntas...

		req.session.fin = true;

	    	res.render('quizzes/random_nomore', {  // Cambiamos de pagina auna que nos indique el final de  
			score: req.session.score       // (se han contestado a todas las preguntas
                                                       // correctamente)
	    	});	
	    }	
    });
}


